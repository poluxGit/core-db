-- MySQL Script generated by MySQL Workbench
-- Sat Sep  2 23:15:05 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema myecm
-- -----------------------------------------------------
-- MyECM Application Main Database.
DROP SCHEMA IF EXISTS `myecm` ;

-- -----------------------------------------------------
-- Schema myecm
--
-- MyECM Application Main Database.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `myecm` DEFAULT CHARACTER SET utf8 ;
USE `myecm` ;

-- -----------------------------------------------------
-- Table `APP_USERS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `APP_USERS` ;

CREATE TABLE IF NOT EXISTS `APP_USERS` (
  `login` VARCHAR(100) NOT NULL,
  `firstname` VARCHAR(50) NULL,
  `lastname` VARCHAR(50) NULL,
  `creation_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`login`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `CORE_TOBJV_OBJET1`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CORE_TOBJV_OBJET1` ;

CREATE TABLE IF NOT EXISTS `CORE_TOBJV_OBJET1` (
  `id` INT(8) UNSIGNED ZEROFILL NOT NULL COMMENT 'Identifiant unique géré par le SGBD.',
  `tid` VARCHAR(30) NOT NULL DEFAULT 'TID-NOTDEFINED' COMMENT 'Identifiant Unique applicatif',
  `bid` VARCHAR(100) NOT NULL DEFAULT 'BID-NOTDEFINED' COMMENT 'Identifiant \"Business\" unique.',
  `version` INT NOT NULL DEFAULT 1 COMMENT 'Version de l\'objet',
  `revision` INT NOT NULL DEFAULT 0 COMMENT 'Révision de l\'objet',
  `stitle` VARCHAR(30) NOT NULL DEFAULT 'Titre cournt non défini' COMMENT 'Titre court de l\'objet',
  `ltitle` VARCHAR(100) NOT NULL DEFAULT 'Titre long non défini' COMMENT 'Titre long de l\'objet',
  `comment` TEXT NULL DEFAULT NULL COMMENT 'description de l\'objet',
  `creator` VARCHAR(100) NOT NULL,
  `ctime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updator` VARCHAR(100) NULL DEFAULT NULL,
  `utime` TIMESTAMP NULL DEFAULT NULL,
  `active` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_TOBJ_USER_CREATOR`
    FOREIGN KEY (`creator`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_TOBJ_USER_UPDATOR`
    FOREIGN KEY (`updator`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `UQ_TID` ON `CORE_TOBJV_OBJET1` (`tid` ASC);

CREATE UNIQUE INDEX `UQ_BID-VERS-REV` ON `CORE_TOBJV_OBJET1` (`bid` ASC, `version` ASC, `revision` ASC);

CREATE INDEX `FK_TOBJ_USER_CREATOR_idx` ON `CORE_TOBJV_OBJET1` (`creator` ASC);

CREATE INDEX `FK_TOBJ_USER_UPDATOR_idx` ON `CORE_TOBJV_OBJET1` (`updator` ASC);


-- -----------------------------------------------------
-- Table `APP_LOGS_DATA_EVENTS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `APP_LOGS_DATA_EVENTS` ;

CREATE TABLE IF NOT EXISTS `APP_LOGS_DATA_EVENTS` (
  `id` INT(8) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NOT NULL,
  `event_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `obj_table` VARCHAR(200) NOT NULL,
  `obj_tid` VARCHAR(30) NOT NULL,
  `message` TEXT NULL,
  `user_event` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_LDTAEVT_USER_CREATOR`
    FOREIGN KEY (`user_event`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_LDTAEVT_USER_CREATOR_idx` ON `APP_LOGS_DATA_EVENTS` (`user_event` ASC);


-- -----------------------------------------------------
-- Table `CORE_TREF_DATA1`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CORE_TREF_DATA1` ;

CREATE TABLE IF NOT EXISTS `CORE_TREF_DATA1` (
  `id` INT(8) UNSIGNED ZEROFILL NOT NULL COMMENT 'Identifiant unique géré par le SGBD.',
  `tid` VARCHAR(30) NOT NULL DEFAULT 'TID-NOTDEFINED' COMMENT 'Identifiant Unique applicatif',
  `bid` VARCHAR(100) NOT NULL DEFAULT 'BID-NOTDEFINED' COMMENT 'Identifiant \"Business\" unique.',
  `stitle` VARCHAR(30) NOT NULL DEFAULT 'Titre cournt non défini' COMMENT 'Titre court de l\'objet',
  `ltitle` VARCHAR(100) NOT NULL DEFAULT 'Titre long non défini' COMMENT 'Titre long de l\'objet',
  `comment` TEXT NULL DEFAULT NULL COMMENT 'Description de l\'objet',
  `creator` VARCHAR(100) NOT NULL,
  `ctime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updator` VARCHAR(100) NULL DEFAULT NULL,
  `utime` TIMESTAMP NULL DEFAULT NULL,
  `active` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_TOBJ_USER_CREATOR0`
    FOREIGN KEY (`creator`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_TOBJ_USER_UPDATOR0`
    FOREIGN KEY (`updator`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `UQ_TID` ON `CORE_TREF_DATA1` (`tid` ASC);

CREATE UNIQUE INDEX `UQ_BID` ON `CORE_TREF_DATA1` (`bid` ASC);

CREATE INDEX `FK_TOBJ_USER_CREATOR_idx` ON `CORE_TREF_DATA1` (`creator` ASC);

CREATE INDEX `FK_TOBJ_USER_UPDATOR_idx` ON `CORE_TREF_DATA1` (`updator` ASC);


-- -----------------------------------------------------
-- Table `CORE_TLNK_OBJ1_DTA1`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CORE_TLNK_OBJ1_DTA1` ;

CREATE TABLE IF NOT EXISTS `CORE_TLNK_OBJ1_DTA1` (
  `obj_tid` VARCHAR(30) NOT NULL COMMENT 'Identifiant interne unique de l\'objet.',
  `dta1_tid` VARCHAR(30) NOT NULL COMMENT 'Identifiant interne unique de la données.',
  `lnk_order` INT NOT NULL DEFAULT 1 COMMENT 'Prioirté du lien pour le couple objet/données.',
  `comment` TEXT NULL DEFAULT NULL COMMENT 'Commentaire sur la liaison données/objet.',
  `creator` VARCHAR(100) NOT NULL,
  `ctime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`obj_tid`, `dta1_tid`, `lnk_order`),
  CONSTRAINT `FK_OBJ1`
    FOREIGN KEY (`obj_tid`)
    REFERENCES `CORE_TOBJV_OBJET1` (`tid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_DTA1`
    FOREIGN KEY (`dta1_tid`)
    REFERENCES `CORE_TREF_DATA1` (`tid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_LNK_OBJDTA_USER_CREATOR`
    FOREIGN KEY (`creator`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_DTA1_idx` ON `CORE_TLNK_OBJ1_DTA1` (`dta1_tid` ASC);

CREATE INDEX `FK_LNK_OBJDTA_USER_CREATOR_idx` ON `CORE_TLNK_OBJ1_DTA1` (`creator` ASC);


-- -----------------------------------------------------
-- Table `CORE_TOBJ_OBJECT2`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CORE_TOBJ_OBJECT2` ;

CREATE TABLE IF NOT EXISTS `CORE_TOBJ_OBJECT2` (
  `id` INT(8) UNSIGNED ZEROFILL NOT NULL COMMENT 'Identifiant unique géré par le SGBD.',
  `tid` VARCHAR(30) NOT NULL DEFAULT 'TID-NOTDEFINED' COMMENT 'Identifiant Unique applicatif',
  `bid` VARCHAR(100) NOT NULL DEFAULT 'BID-NOTDEFINED' COMMENT 'Identifiant \"Business\" unique.',
  `stitle` VARCHAR(30) NOT NULL DEFAULT 'Titre cournt non défini' COMMENT 'Titre court de l\'objet',
  `ltitle` VARCHAR(100) NOT NULL DEFAULT 'Titre long non défini' COMMENT 'Titre long de l\'objet',
  `comment` TEXT NULL DEFAULT NULL COMMENT 'Description de l\'objet',
  `creator` VARCHAR(100) NOT NULL,
  `ctime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updator` VARCHAR(100) NULL DEFAULT NULL,
  `utime` TIMESTAMP NULL DEFAULT NULL,
  `active` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_TOBJ_USER_CREATOR00`
    FOREIGN KEY (`creator`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_TOBJ_USER_UPDATOR00`
    FOREIGN KEY (`updator`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `UQ_TID` ON `CORE_TOBJ_OBJECT2` (`tid` ASC);

CREATE UNIQUE INDEX `UQ_BID` ON `CORE_TOBJ_OBJECT2` (`bid` ASC);

CREATE INDEX `FK_TOBJ_USER_CREATOR_idx` ON `CORE_TOBJ_OBJECT2` (`creator` ASC);

CREATE INDEX `FK_TOBJ_USER_UPDATOR_idx` ON `CORE_TOBJ_OBJECT2` (`updator` ASC);


-- -----------------------------------------------------
-- Table `CORE_TLNK_OBJ1_OBJ2`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CORE_TLNK_OBJ1_OBJ2` ;

CREATE TABLE IF NOT EXISTS `CORE_TLNK_OBJ1_OBJ2` (
  `obj1_tid` VARCHAR(30) NOT NULL,
  `obj2_tid` VARCHAR(30) NOT NULL,
  `comment` TEXT NULL DEFAULT NULL,
  `creator` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`obj1_tid`, `obj2_tid`),
  CONSTRAINT `FK_OBJ1_TID`
    FOREIGN KEY (`obj1_tid`)
    REFERENCES `CORE_TOBJV_OBJET1` (`tid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_OBJ2_TID`
    FOREIGN KEY (`obj2_tid`)
    REFERENCES `CORE_TOBJ_OBJECT2` (`tid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_LNKOBJ1OBJ2_USER_CREATOR`
    FOREIGN KEY (`creator`)
    REFERENCES `APP_USERS` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_OBJ2_TID_idx` ON `CORE_TLNK_OBJ1_OBJ2` (`obj2_tid` ASC);

CREATE INDEX `FK_LNKOBJ1OBJ2_USER_CREATOR_idx` ON `CORE_TLNK_OBJ1_OBJ2` (`creator` ASC);

USE `myecm` ;

-- -----------------------------------------------------
-- procedure LOG_LogDataUpdate
-- -----------------------------------------------------

USE `myecm`;
DROP procedure IF EXISTS `LOG_LogDataUpdate`;

DELIMITER $$
USE `myecm`$$
CREATE PROCEDURE `LOG_LogDataUpdate`(IN pSTableName VARCHAR(200),IN pStid VARCHAR(30))
COMMENT 'Proc. Logging DATA-UPDATE event.'
BEGIN
	DECLARE lMsg TEXT;
    SET lMsg = CONCAT('Mise à jour de "',pStid,'" dans la table "',pSTableName,'".');
	INSERT INTO `APP_LOGS_DATA_EVENTS`
    (
		`type`,
        `event_date`,
        `obj_table`,
        `obj_tid`,
        `message`,
        `user_event`
	) VALUES
    ('DATA-UPDATE', NOW(), pSTableName, pStid, lMsg, CURRENT_USER);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LOG_LogDataInsert
-- -----------------------------------------------------

USE `myecm`;
DROP procedure IF EXISTS `LOG_LogDataInsert`;

DELIMITER $$
USE `myecm`$$
CREATE PROCEDURE `LOG_LogDataInsert`(IN pSTableName VARCHAR(200),IN pStid VARCHAR(30))
COMMENT 'Proc. Logging DATA-INSERT event.'
BEGIN
	DECLARE lMsg TEXT;
    SET lMsg = CONCAT('Ajout de "',pStid,'" dans la table "',pSTableName,'".');
	INSERT INTO `APP_LOGS_DATA_EVENTS`
    (
		`type`,
        `event_date`,
        `obj_table`,
        `obj_tid`,
        `message`,
        `user_event`
	) VALUES
    ('DATA-INSERT', NOW(), pSTableName, pStid, lMsg, CURRENT_USER);

END$$

DELIMITER ;
SET SQL_MODE = '';
GRANT USAGE ON *.* TO myecm_admin;
 DROP USER myecm_admin;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'myecm_admin' IDENTIFIED BY 'Odomzhzf31';

GRANT ALL ON * TO 'myecm_admin';
GRANT EXECUTE ON ROUTINE * TO 'myecm_admin';
GRANT SELECT ON TABLE * TO 'myecm_admin';
GRANT SELECT, INSERT, TRIGGER ON TABLE * TO 'myecm_admin';
GRANT SELECT, INSERT, TRIGGER, UPDATE, DELETE ON TABLE * TO 'myecm_admin';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `myecm`;

DELIMITER $$

USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TOBJV_OBJET1_BEFORE_INSERT` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TOBJV_OBJET1_BEFORE_INSERT` BEFORE INSERT ON `CORE_TOBJV_OBJET1` FOR EACH ROW
BEGIN
	-- TID Rule
    SET NEW.tid =  '';
    -- Creator definition.
    SET NEW.creator = CURRENT_USER;
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TOBJV_OBJET1_AFTER_INSERT` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TOBJV_OBJET1_AFTER_INSERT` AFTER INSERT ON `CORE_TOBJV_OBJET1` FOR EACH ROW
BEGIN
	CALL LOG_LogDataInsert('CORE_TOBJV_OBJET1',NEW.tid);
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TOBJV_OBJET1_BEFORE_UPDATE` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TOBJV_OBJET1_BEFORE_UPDATE` BEFORE UPDATE ON `CORE_TOBJV_OBJET1` FOR EACH ROW
BEGIN
	# Define Updator and update timestamp  to now.
	SET updator = CURRENT_USER;
    SET utime = NOW();
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TOBJV_OBJET1_AFTER_UPDATE` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TOBJV_OBJET1_AFTER_UPDATE` AFTER UPDATE ON `CORE_TOBJV_OBJET1` FOR EACH ROW
BEGIN
	CALL LOG_LogDataUpdate('CORE_TOBJV_OBJET1',NEW.tid);
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TREF_DATA1_BEFORE_INSERT` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TREF_DATA1_BEFORE_INSERT` BEFORE INSERT ON `CORE_TREF_DATA1` FOR EACH ROW
BEGIN
	-- TID Rule
    SET NEW.tid =  '';
    -- Creator definition.
    SET NEW.creator = CURRENT_USER;
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TREF_DATA1_AFTER_INSERT` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TREF_DATA1_AFTER_INSERT` AFTER INSERT ON `CORE_TREF_DATA1` FOR EACH ROW
BEGIN
	CALL LOG_LogDataInsert('CORE_TREF_DATA1',NEW.tid);
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TREF_DATA1_BEFORE_UPDATE` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TREF_DATA1_BEFORE_UPDATE` BEFORE UPDATE ON `CORE_TREF_DATA1` FOR EACH ROW
BEGIN
	# Define Updator and update timestamp  to now.
	SET updator = CURRENT_USER;
    SET utime = NOW();
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TREF_DATA1_AFTER_UPDATE` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TREF_DATA1_AFTER_UPDATE` AFTER UPDATE ON `CORE_TREF_DATA1` FOR EACH ROW
BEGIN
	CALL LOG_LogDataUpdate('CORE_TREF_DATA1',NEW.tid);
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TOBJ_OBJECT2_BEFORE_INSERT` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TOBJ_OBJECT2_BEFORE_INSERT` BEFORE INSERT ON `CORE_TOBJ_OBJECT2` FOR EACH ROW
BEGIN
	-- TID Rule
    SET NEW.tid =  '';
    -- Creator definition.
    SET NEW.creator = CURRENT_USER;
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TOBJ_OBJECT2_AFTER_INSERT` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TOBJ_OBJECT2_AFTER_INSERT` AFTER INSERT ON `CORE_TOBJ_OBJECT2` FOR EACH ROW
BEGIN
	CALL LOG_LogDataInsert('CORE_TOBJ_OBJECT2',NEW.tid);
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TOBJ_OBJECT2_BEFORE_UPDATE` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TOBJ_OBJECT2_BEFORE_UPDATE` BEFORE UPDATE ON `CORE_TOBJ_OBJECT2` FOR EACH ROW
BEGIN
	# Define Updator and update timestamp  to now.
	SET updator = CURRENT_USER;
    SET utime = NOW();
END$$


USE `myecm`$$
DROP TRIGGER IF EXISTS `CORE_TOBJ_OBJECT2_AFTER_UPDATE` $$
USE `myecm`$$
CREATE DEFINER = CURRENT_USER TRIGGER `myecm`.`CORE_TOBJ_OBJECT2_AFTER_UPDATE` AFTER UPDATE ON `CORE_TOBJ_OBJECT2` FOR EACH ROW
BEGIN
	CALL LOG_LogDataUpdate('CORE_TOBJ_OBJECT2',NEW.tid);
END$$


DELIMITER ;
